@using Cod.Channel.Identity
@inject EmailLoginViewModel ViewModel

<div class="wrapper-container">
    <div class="login-container">
        <div class="login-form">
            <h2>Login</h2>
            <form id="login-form">
                <div class="form-group">
                    <label for="email">Email address</label>
                    <input type="email" class="form-control" id="email" aria-describedby="emailHelp" placeholder="Enter email" disabled="@IsStep2" @bind="ViewModel.UserInput.Username">
                    <small id="emailHelp" class="form-text text-muted" hidden="@IsStep1">We'll never share your email with anyone else.</small>

                    @if (ViewModel.UserInputValidation.ContainsKey(nameof(ViewModel.UserInput.Username)))
                    {
                        <div id="email-error" class="text-danger">Please enter a valid email address</div>
                    }
                </div>

                <div id="password-field" class="form-group" hidden="@IsStep1" style="display: flex;">
                    <div>
                        <p class="password-description">We've sent an email to your email address. Please check your inbox for a 6 digit numeric one-time password.</p>
                    </div>
                    <div id="otp-inputs">
                        <input type="text" maxlength="1" class="form-control otp-input" @bind="a" />
                        <input type="text" maxlength="1" class="form-control otp-input" @bind="b" />
                        <input type="text" maxlength="1" class="form-control otp-input" @bind="c" />
                        <input type="text" maxlength="1" class="form-control otp-input" @bind="d" />
                        <input type="text" maxlength="1" class="form-control otp-input" @bind="e" />
                        <input type="text" maxlength="1" class="form-control otp-input" @bind="f" />
                    </div>
                    @if (ViewModel.IsFailed || ViewModel.UserInputValidation.ContainsKey(nameof(ViewModel.UserInput.Password)))
                    {
                        <div id="otp-error" class="text-danger">Please enter the valid one-time password</div>
                    }
                </div>
                <input id="login-otp-input" type="text" style="display: none;" @bind="ViewModel.UserInput.Password" />
                <button class="btn btn-primary" disabled="@ViewModel.IsBusy" hidden="@IsStep1" @onclick="OnLogin">Login</button>
                <div id="go-back" class="back-btn" hidden="@IsStep1"><i class="fas fa-arrow-left"></i></div>
                <button id="login-next" class="btn btn-primary" @onclick="ViewModel.OnLogin" hidden="@IsStep2" disabled="@ViewModel.IsBusy">Next</button>

                @if (ViewModel.IsBusy)
                {
                    <div id="loading" class="loading"><i class="fas fa-spinner fa-spin"></i></div>
                }
            </form>
        </div>
    </div>
</div>

<script>
    let otpInputs = Array.from(document.getElementsByClassName('otp-input'));
    otpInputs.forEach((input, index) => {
        input.addEventListener('keyup', (e) => {
            if (e.key >= 0 && e.key <= 9) {
                if (index < otpInputs.length - 1) {
                    otpInputs[index + 1].focus();
                }
            } else if (e.key === 'Backspace') {
                if (index > 0) {
                    otpInputs[index - 1].focus();
                }
            }
        });
    });
</script>

@code {
    private string a = string.Empty;
    private string b = string.Empty;
    private string c = string.Empty;
    private string d = string.Empty;
    private string e = string.Empty;
    private string f = string.Empty;

    private bool IsStep1 => !ViewModel.IsChallenged;
    private bool IsStep2 => ViewModel.IsChallenged;

    private async Task OnLogin()
    {
        ViewModel.UserInput.Password = $"{a.Trim()}{b.Trim()}{c.Trim()}{d.Trim()}{e.Trim()}{f.Trim()}";
        await ViewModel.OnLogin();
    }
}