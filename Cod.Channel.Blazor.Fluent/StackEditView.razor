@inherits Cod.Channel.Blazor.Fluent.ViewModelComponentBase<IViewModel>

@if (!IsBusy)
{
    <FluentCard Class="edit-form-card">
        <EditForm Model="@this.Data">
            <DataAnnotationsValidator />
            <FluentValidationSummary />
            @if (properties != null)
            {
                var subject = properties.SelectMany(g => g).FirstOrDefault(p => p.IsSubject);
                if (subject != null)
                {
                    <PropertyEditMode ViewModel="this.Data" Property="subject" />
                }
                foreach (var group in properties)
                {
                    <div class="edit-section-fields">
                        @foreach (var property in group)
                        {
                            if (!property.IsSubject)
                            {
                                <PropertyEditMode ViewModel="this.Data" Property="property" />
                            }
                        }
                    </div>
                    @if (group != properties.Last())
                    {
                        <div class="card-section-divider"></div>
                    }
                }
            }
            <div class="edit-actions edit-actions-bottom">
                @if (actions != null)
                {
                    foreach (var group in actions)
                    {
                        foreach (var action in group)
                        {
                            <FluentButton Appearance="Appearance.Accent"
                                          Class="card-action-btn"
                                          IconStart="@(new Icons.Regular.Size16.Money())"
                                          OnClick="@(async () => await action.Action.Invoke(this.Data))">
                                @action.DisplayName
                            </FluentButton>
                        }
                    }
                }
            </div>
        </EditForm>
    </FluentCard>
}
else
{
    <div class="loading-container-large">
        <FluentProgressRing />
    </div>
}

@code {
    private IEnumerable<IEditModeValueProvider> valueProviders = [];
    private IEnumerable<IGrouping<int, EditProperty>>? properties;
    private IEnumerable<IGrouping<int, DisplayAction>>? actions;

    [Inject]
    public required IEditModeValueProviderFactory ValueProviderFactory { get; set; }

    protected override async Task InitializeViewModelAsync()
    {
        await base.InitializeViewModelAsync();
        valueProviders = ValueProviderFactory.Create(this.Data.GetType());
        properties = ModelHelper.GetEditProperties(this.Data);
        actions = ModelHelper.GetDisplayActions(this.Data);
    }
}
