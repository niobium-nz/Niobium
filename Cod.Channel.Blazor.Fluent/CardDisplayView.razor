@inherits Cod.Channel.Blazor.Fluent.ViewModelComponentBase<IListViewModel>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="fluent-error-message">
        <span class="fluent-error-icon">&#9888;</span>
        @ErrorMessage
    </div>
}
else if (!IsBusy)
{
    <div class="card-list-grid">
        @if (Data.IsInitialized)
        {
            @foreach (var item in Data)
            {
                <FluentCard Class="card-list-item" Width="100%">
                    @if (properties != null)
                    {
                        var subject = properties.SelectMany(g => g).FirstOrDefault(p => p.IsSubject);
                        if (subject != null)
                        {
                            <PropertyDisplayMode ViewModel="item" Property="subject" />
                        }
                        foreach (var group in properties)
                        {
                            <div class="card-section-fields">
                                @foreach (var property in group)
                                {
                                    if (!property.IsSubject)
                                    {
                                        <PropertyDisplayMode ViewModel="item" Property="property" />
                                    }
                                }
                            </div>
                            @if (group != properties.Last())
                            {
                                <div class="card-section-divider"></div>
                            }
                        }
                    }
                    @if (item.IsBusy)
                    {
                        <div class="loading-container">
                            <FluentProgressRing />
                        </div>
                    }
                    <div class="card-actions">
                        @if (actions != null)
                        {
                            foreach (var action in actions)
                            {
                                <FluentButton Appearance="Appearance.Accent"
                                              Class="card-action-btn"
                                              IconStart="@(new Icons.Regular.Size16.Money())"
                                              OnClick="@(async () => await action.Action.Invoke(item))">
                                    @action.DisplayName
                                </FluentButton>
                            }
                        }
                    </div>
                </FluentCard>
            }
        }
    </div>
}
else
{
    <div class="loading-container-large">
        <FluentProgressRing />
    </div>
}

@code {
    private IEnumerable<IGrouping<int, DisplayProperty>>? properties;
    private IEnumerable<DisplayAction>? actions;

    protected override async Task InitializeViewModelAsync()
    {
        try
        {
            await Data.InitializeAsync();
            var any = Data.FirstOrDefault();
            if (any != null)
            {
                properties = ModelHelper.GetDisplayProperties(any);
                actions = ModelHelper.GetDisplayActions(any);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred while initializing the view: {ex.Message}";
        }
    }
}
